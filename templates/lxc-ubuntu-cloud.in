#!/bin/bash

# template script for generating ubuntu container for LXC based on daily cloud
# images
#
# Copyright Â© 2012 Serge Hallyn <serge.hallyn@canonical.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2, as
# published by the Free Software Foundation.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

set -e

if [ -r /etc/default/lxc ]; then
    . /etc/default/lxc
fi

copy_configuration()
{
    path=$1
    rootfs=$2
    name=$3
    arch=$4

    if [ $arch = "i386" ]; then
        arch="i686"
    fi

    cat <<EOF >> $path/config
lxc.utsname = $name

lxc.tty = 4
lxc.pts = 1024
lxc.rootfs = $rootfs
lxc.mount  = $path/fstab
lxc.arch = $arch
lxc.cap.drop = sys_module mac_admin

lxc.cgroup.devices.deny = a
# Allow any mknod (but not using the node)
lxc.cgroup.devices.allow = c *:* m
lxc.cgroup.devices.allow = b *:* m
# /dev/null and zero
lxc.cgroup.devices.allow = c 1:3 rwm
lxc.cgroup.devices.allow = c 1:5 rwm
# consoles
lxc.cgroup.devices.allow = c 5:1 rwm
lxc.cgroup.devices.allow = c 5:0 rwm
#lxc.cgroup.devices.allow = c 4:0 rwm
#lxc.cgroup.devices.allow = c 4:1 rwm
# /dev/{,u}random
lxc.cgroup.devices.allow = c 1:9 rwm
lxc.cgroup.devices.allow = c 1:8 rwm
lxc.cgroup.devices.allow = c 136:* rwm
lxc.cgroup.devices.allow = c 5:2 rwm
# rtc
lxc.cgroup.devices.allow = c 254:0 rwm
#fuse
lxc.cgroup.devices.allow = c 10:229 rwm
#tun
lxc.cgroup.devices.allow = c 10:200 rwm
#full
lxc.cgroup.devices.allow = c 1:7 rwm
#hpet
lxc.cgroup.devices.allow = c 10:228 rwm
#kvm
lxc.cgroup.devices.allow = c 10:232 rwm
EOF

    cat <<EOF > $path/fstab
proc            $rootfs/proc         proc    nodev,noexec,nosuid 0 0
sysfs           $rootfs/sys          sysfs defaults  0 0
EOF

    return 0
}

usage()
{
    cat <<EOF
$1 -h|--help [-a|--arch] [-F | --flush-cache] [-r|--release <release>]
release: lucid | maverick | natty | oneiric | precise
arch: amd64 or i386: defaults to host arch
EOF
    return 0
}

options=$(getopt -o a:hp:r:n:Fi:C -l arch:,help,path:,release:,name:,flush-cache,hostid:,cloud -- "$@")
if [ $? -ne 0 ]; then
    usage $(basename $0)
    exit 1
fi
eval set -- "$options"

release=lucid
if [ -f /etc/lsb-release ]; then
    . /etc/lsb-release
    case "$DISTRIB_CODENAME" in
        lucid|maverick|natty|oneiric|precise)
            release=$DISTRIB_CODENAME
        ;;
    esac
fi

arch=$(arch)

# Code taken from debootstrap
if [ -x /usr/bin/dpkg ] && /usr/bin/dpkg --print-architecture >/dev/null 2>&1; then
    arch=`/usr/bin/dpkg --print-architecture`
elif type udpkg >/dev/null 2>&1 && udpkg --print-architecture >/dev/null 2>&1; then
    arch=`/usr/bin/udpkg --print-architecture`
else
    arch=$(arch)
    if [ "$arch" = "i686" ]; then
        arch="i386"
    elif [ "$arch" = "x86_64" ]; then
        arch="amd64"
    elif [ "$arch" = "armv7l" ]; then
        arch="armel"
    fi
fi

hostarch=$arch
cloud=0
flushcache=0
while true
do
    case "$1" in
    -h|--help)      usage $0 && exit 0;;
    -p|--path)      path=$2; shift 2;;
    -n|--name)      name=$2; shift 2;;
    -F|--flush-cache) flushcache=1; shift 1;;
    -r|--release)   release=$2; shift 2;;
    -a|--arch)      arch=$2; shift 2;;
    -i|--hostid)    host_id=$2; shift 2;;
    -u|--userdata)  userdata=$2; shift 2;;
    -C|--cloud)     cloud=1; shift 1;;
    --)             shift 1; break ;;
        *)              break ;;
    esac
done

if [ "$arch" == "i686" ]; then
    arch=i386
fi

if [ $hostarch = "i386" -a $arch = "amd64" ]; then
    echo "can't create amd64 container on i386"
    exit 1
fi

if [ $arch != "i386" -a $arch != "amd64" ]; then
    echo "Only i386 and amd64 are supported by the ubuntu cloud template."
    exit 1
fi

if [ -z "$path" ]; then
    echo "'path' parameter is required"
    exit 1
fi

if [ "$(id -u)" != "0" ]; then
    echo "This script should be run as 'root'"
    exit 1
fi

rootfs=$path/rootfs

type ubuntu-cloudimg-query
type wget

# determine the url, tarball, and directory names
# download if needed
cache="/var/cache/lxc/cloud-$release"

mkdir -p $cache

url1=`ubuntu-cloudimg-query precise daily $arch --format "%{url}\n"`
url2=`echo $url1 | sed -e 's/.tar.gz/-root\0/'`
filename=`basename $url2`

mkdir -p /var/lock/subsys/
(
    flock -n -x 200

    cd $cache
    if [ $flushcache -eq 1 ]; then
        echo "Clearing the cached images"
        rm -f $filename
    fi

    if [ ! -f $filename ]; then
        wget $url2
    fi

    echo "Extracting rootfs"
    mkdir -p $rootfs
    cd $rootfs
    tar -zxf $cache/$filename


    if [ $cloud -eq 0 ]; then
	echo "Configuring for running outside of a cloud environment"
	echo "If you want to configure for a cloud evironment, please use '-- -C' to create the container"

	seed_d=$rootfs/var/lib/cloud/seed/nocloud-net
	rhostid=$(uuidgen | cut -c -8)
        host_id=${hostid:-$rhostid}
        mkdir -p $seed_d

	cat > "$seed_d/meta-data" <<EOF
instance_id: lxc-$host_id
EOF

	if [ ! -f $userdata ]; then
		cp $userdata $seed_d/user-data
	else
	        echo "#cloud-config" > $seed_d/user-data
		if [ -z "$MIRROR" ]; then
			MIRROR="http://archive.ubuntu.com/ubuntu"
		fi
		echo "apt-mirror: $MIRROR" >> $seed_d/user-data
	fi

    	chroot $rootfs /usr/sbin/usermod -U ubuntu
	echo "Please login as user ubuntu with password ubuntu."

   else

	echo "Configured for running in a cloud environment."
	echo "If you do not have a meta-data service, this container will likely be useless."

   fi

) 200>/var/lock/subsys/lxc-ubucloud

copy_configuration $path $rootfs $name $arch

echo "Container $name created."
exit 0
